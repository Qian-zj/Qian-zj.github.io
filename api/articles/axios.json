{"title":"axios","uid":"33876cf3e210da358d8e4b065eea88e6","slug":"axios","date":"2023-05-09T06:55:19.000Z","updated":"2023-05-09T15:46:42.170Z","comments":false,"path":"api/articles/axios.json","keywords":null,"cover":"/images/bg1.jpg","content":"<p>Axios 是一个基于 <em><a href=\"https://javascript.info/promise-basics\">promise</a></em> 网络请求库，作用于<a href=\"https://nodejs.org/\"><code>node.js</code></a> 和浏览器中。 它是 <em><a href=\"https://www.lullabot.com/articles/what-is-an-isomorphic-application\">isomorphic</a></em> 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>从浏览器创建 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequests</a></li>\n<li>从 node.js 创建 <a href=\"http://nodejs.org/api/http.html\">http</a> 请求</li>\n<li>支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防御<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li>\n</ul>\n<h1 id=\"1、配置\"><a href=\"#1、配置\" class=\"headerlink\" title=\"1、配置\"></a>1、配置</h1><h2 id=\"1-1、安装（三种方法）\"><a href=\"#1-1、安装（三种方法）\" class=\"headerlink\" title=\"1.1、安装（三种方法）\"></a>1.1、安装（三种方法）</h2><h3 id=\"1）npm安装\"><a href=\"#1）npm安装\" class=\"headerlink\" title=\"1）npm安装\"></a>1）npm安装</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>npm install axios</code></p></blockquote>\n<h3 id=\"2）bower安装\"><a href=\"#2）bower安装\" class=\"headerlink\" title=\"2）bower安装\"></a>2）bower安装</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>bower install axios</code></p></blockquote>\n<h3 id=\"3）通过cdn引入\"><a href=\"#3）通过cdn引入\" class=\"headerlink\" title=\"3）通过cdn引入\"></a>3）通过cdn引入</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;axios&#x2F;1.3.6&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h1 id=\"2、用axios发送不同的4种请求方式\"><a href=\"#2、用axios发送不同的4种请求方式\" class=\"headerlink\" title=\"2、用axios发送不同的4种请求方式\"></a>2、用axios发送不同的4种请求方式</h1><h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ol>\n<li>运行<code>json</code>文件：终端输入<code>npx json-server --watch db.json</code></li>\n<li><code>写axios请求前的初始代码</code>：</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;\n    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;axios&#x2F;1.3.6&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n        &lt;h2 class&#x3D;&quot;page-header&quot;&gt;基本使用&lt;&#x2F;h2&gt;\n        &lt;button class&#x3D;&quot;btn btn-primary&quot;&gt;发送GET请求&lt;&#x2F;button&gt;\n        &lt;button class&#x3D;&quot;btn btn-secondary&quot;&gt;发送POST请求&lt;&#x2F;button&gt;\n        &lt;button class&#x3D;&quot;btn btn-success&quot;&gt;发送PUT请求&lt;&#x2F;button&gt;\n        &lt;button class&#x3D;&quot;btn btn-danger&quot;&gt;发送DELETE请求&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n        &#x2F;&#x2F;获取按钮\n        const btns &#x3D; document.querySelectorAll(&#39;button&#39;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n\n\n<h2 id=\"2-1、发送GET请求\"><a href=\"#2-1、发送GET请求\" class=\"headerlink\" title=\"2.1、发送GET请求\"></a>2.1、发送GET请求</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;第一个\n&#x2F;&#x2F;发送GET请求,获取数据\nbtns[0].onclick &#x3D; function()&#123;\n    &#x2F;&#x2F;发送axios请求\n    axios(&#123;\n        &#x2F;&#x2F;请求类型\n        method: &#39;GET&#39;,\n        &#x2F;&#x2F;URL\n        url:&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;posts&#x2F;2&#39;\n    &#125;).then(response &#x3D;&gt; &#123;\n        console.log(response);\n    &#125;)\n&#125;</code></pre>\n\n\n\n<h2 id=\"2-2、发送POST请求\"><a href=\"#2-2、发送POST请求\" class=\"headerlink\" title=\"2.2、发送POST请求\"></a>2.2、发送POST请求</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>发送成功后，<code>db.json</code>文件发生变化</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;第二个\n&#x2F;&#x2F;发送POST请求，添加数据\nbtns[1].onclick &#x3D; function()&#123;\n    &#x2F;&#x2F;发送axios请求\n    axios(&#123;\n        &#x2F;&#x2F;请求类型\n        method: &#39;POST&#39;,\n        &#x2F;&#x2F;URL\n        url:&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;posts&#39;,\n        &#x2F;&#x2F;设置请求体\n        data:&#123;\n            &quot;title&quot;: &quot;今天天气不错&quot;, \n            &quot;author&quot;: &quot;冷的要死&quot;\n        &#125;\n    &#125;).then(response &#x3D;&gt; &#123;\n        console.log(response);\n    &#125;)\n&#125;</code></pre>\n\n\n\n<h2 id=\"2-3、发送PUT请求\"><a href=\"#2-3、发送PUT请求\" class=\"headerlink\" title=\"2.3、发送PUT请求\"></a>2.3、发送PUT请求</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;第三个\n&#x2F;&#x2F;发送PUT请求，更新数据\nbtns[2].onclick &#x3D; function()&#123;\n    &#x2F;&#x2F;发送axios请求\n    axios(&#123;\n        &#x2F;&#x2F;请求类型\n        method: &#39;PUT&#39;,\n        &#x2F;&#x2F;URL\n        url:&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;posts&#x2F;3&#39;,\n        &#x2F;&#x2F;设置请求体\n        data:&#123;\n            &quot;title&quot;: &quot;今天天气不错&quot;, \n            &quot;author&quot;: &quot;不对，是冷的要死&quot;\n        &#125;\n    &#125;).then(response &#x3D;&gt; &#123;\n    \tconsole.log(response);\n    &#125;)\n&#125;</code></pre>\n\n\n\n<h2 id=\"2-4、发送DELETE请求\"><a href=\"#2-4、发送DELETE请求\" class=\"headerlink\" title=\"2.4、发送DELETE请求\"></a>2.4、发送DELETE请求</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;第四个按钮\n&#x2F;&#x2F;发送DELETE请求，更新数据\nbtns[3].onclick &#x3D; function()&#123;\n    &#x2F;&#x2F;发送axios请求\n    axios(&#123;\n        &#x2F;&#x2F;请求类型\n        method: &#39;DELETE&#39;,\n        &#x2F;&#x2F;URL\n        url:&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;posts&#x2F;4&#39;\n    &#125;).then(response &#x3D;&gt; &#123;\n    \tconsole.log(response);\n    &#125;)\n&#125;</code></pre>\n\n\n\n<h1 id=\"3、axios其他的请求方法\"><a href=\"#3、axios其他的请求方法\" class=\"headerlink\" title=\"3、axios其他的请求方法\"></a>3、axios其他的请求方法</h1><p><img src=\"C:\\Users\\庄静\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230422215739568.png\" alt=\"image-20230422215739568\"></p>\n<h1 id=\"4、axios请求后，响应结果的结构\"><a href=\"#4、axios请求后，响应结果的结构\" class=\"headerlink\" title=\"4、axios请求后，响应结果的结构\"></a>4、axios请求后，响应结果的结构</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">控制台输出的response：\n├── config\n│   ├── method: 请求方式\n│   └── url: 请求地址\n├── data: 响应体(服务器的返回结果)\n├── headers: 响应头的信息\n├── request: 原生的AJAX请求对象\n│   ├── XMLHttpRequest实例对象\n├── status: 响应的状态码\n└── statusText: 响应的状态字符串\n\n\n\n├── node_modules \n├── public\n│   ├── favicon.ico: 页签图标\n│   └── index.html: 主页面\n├── src\n│   ├── assets: 存放静态资源\n│   │   └── logo.png\n│   │── component: 存放组件\n│   │   └── HelloWorld.vue\n│   │── App.vue: 汇总所有组件\n│   └── main.js: 入口文件\n├── .gitignore: git版本管制忽略的配置\n├── babel.config.js: babel的配置文件\n├── package.json: 应用包配置文件 \n├── README.md: 应用描述文件\n└── package-lock.json: 包版本控制文件</code></pre>\n\n\n\n<h1 id=\"5、axios配置对象\"><a href=\"#5、axios配置对象\" class=\"headerlink\" title=\"5、axios配置对象\"></a>5、axios配置对象</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">高频常用参数罗列：\n\t1：url       &#x2F;&#x2F;  通过设置url参数，决定请求到底发送给谁\n\t2：method    &#x2F;&#x2F; 设置请求的类型，get&#x2F;post&#x2F;delete..\n\t3：baseURL   &#x2F;&#x2F; 设置url的基础结构，发送请求配置时只需要设置url即可，axios会自动将两者进行拼接\n\t4：headers   &#x2F;&#x2F; 头信息：比较实用的参数，在某些项目当中，进行身份校验的时候，要求在头信息中加入一个特殊的\t\t\t   标识  &#x2F;&#x2F; 来检验请求是否满足要求，可以借助headers对请求头信息做一个配置\n\t5：params    &#x2F;&#x2F; 也是一个比较常用的参数，来设定url参数的，可以通过params直接添加url参数名和参数值\n\t6：data\n\t7：timeout    &#x2F;&#x2F; 超时请求时间，单位是ms 超过请求时间，请求就会被取消\n\t8：其余的都是不经常使用的参数，了解即可！</code></pre>\n\n\n\n<p>官方配置文档详解</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  &#x2F;&#x2F;  通过设置url参数，决定请求到底发送给谁\n  url: &#39;&#x2F;user&#39;,\n\n  &#x2F;&#x2F; 设置请求的类型，get&#x2F;post&#x2F;delete..\n  method: &#39;get&#39;, &#x2F;&#x2F; default\n\n  &#x2F;&#x2F; 设置url的基础结构，发送请求配置时只需要设置url即可，axios会自动将两者进行拼接\n  baseURL: &#39;https:&#x2F;&#x2F;some-domain.com&#x2F;api&#x2F;&#39;,\n\n  &#x2F;&#x2F; 可以对请求的数据做一个处理，在将处理完的结果向服务器发送\n  transformRequest: [function (data, headers) &#123;\n    &#x2F;&#x2F; Do whatever you want to transform the data\n    return data;\n  &#125;],\n\n  &#x2F;&#x2F; 对响应结果做一个处理配置\n  transformResponse: [function (data) &#123;\n    &#x2F;&#x2F; Do whatever you want to transform the data\n    return data;\n  &#125;],\n\n  &#x2F;&#x2F; 头信息：比较实用的参数，在某些项目当中，进行身份校验的时候，要求在头信息中加入一个特殊的标识\n  &#x2F;&#x2F; 来检验请求是否满足要求，可以借助headers对请求头信息做一个配置\n  headers: &#123;&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;&#125;,\n\n  &#x2F;&#x2F; 也是一个比较常用的参数，来设定url参数的，可以通过params直接添加url参数名和参数值\n  params: &#123;\n    ID: 12345\n  &#125;,\n\n  &#x2F;&#x2F; 参数序列化的，不经常使用，对请求的参数做一个系列化，转化成字符串\n  paramsSerializer: function (params) &#123;\n    return Qs.stringify(params, &#123;arrayFormat: &#39;brackets&#39;&#125;)\n  &#125;,\n\n  data: &#123;\n    firstName: &#39;Fred&#39;\n  &#125;,\n\n  data: &#39;Country&#x3D;Brasil&amp;City&#x3D;Belo Horizonte&#39;,\n\n  &#x2F;&#x2F; 超时请求时间，单位是ms 超过请求时间，请求就会被取消\n  timeout: 1000, &#x2F;&#x2F; default is &#96;0&#96; (no timeout)\n\n  &#x2F;&#x2F; 跨域请求时对cookie的携带做一个设置，false为不携带\n  withCredentials: false, &#x2F;&#x2F; default\n\n  &#x2F;&#x2F; 发送请求识别器做一个设置\n  adapter: function (config) &#123;\n    &#x2F;* ... *&#x2F;\n  &#125;,\n\n  &#x2F;&#x2F; 请求基础验证，设置用户名和密码的，相对用的较少\n  auth: &#123;\n    username: &#39;janedoe&#39;,\n    password: &#39;s00pers3cret&#39;\n  &#125;,\n\n  &#x2F;&#x2F; 对响应体结果的格式做个设置\n  responseType: &#39;json&#39;, &#x2F;&#x2F; default\n\n  responseEncoding: &#39;utf8&#39;, &#x2F;&#x2F; default\n  xsrfCookieName: &#39;XSRF-TOKEN&#39;, &#x2F;&#x2F; default\n  xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, &#x2F;&#x2F; default\n  onUploadProgress: function (progressEvent) &#123;\n    &#x2F;&#x2F; Do whatever you want with the native progress event\n  &#125;,\n  onDownloadProgress: function (progressEvent) &#123;\n    &#x2F;&#x2F; Do whatever you want with the native progress event\n  &#125;,\n  maxContentLength: 2000,\n  maxBodyLength: 2000,\n  validateStatus: function (status) &#123;\n    return status &gt;&#x3D; 200 &amp;&amp; status &lt; 300; &#x2F;&#x2F; default\n  &#125;,\n  maxRedirects: 5, &#x2F;&#x2F; default\n  socketPath: null, &#x2F;&#x2F; default\n  httpAgent: new http.Agent(&#123; keepAlive: true &#125;),\n  httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),\n\n  proxy: &#123;\n    protocol: &#39;https&#39;,\n    host: &#39;127.0.0.1&#39;,\n    port: 9000,\n    auth: &#123;\n      username: &#39;mikeymike&#39;,\n      password: &#39;rapunz3l&#39;\n    &#125;\n  &#125;,\n\n  cancelToken: new CancelToken(function (cancel) &#123;\n  &#125;),\n  decompress: true &#x2F;&#x2F; default\n\n&#125;</code></pre>\n\n\n\n<h1 id=\"6、axios的默认配置\"><a href=\"#6、axios的默认配置\" class=\"headerlink\" title=\"6、axios的默认配置\"></a>6、axios的默认配置</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;获取按钮\nconst btns &#x3D; document.querySelectorAll(&#39;button&#39;)\n\n&#x2F;&#x2F;默认配置\naxios.defaults.method &#x3D; &#39;GET&#39;   &#x2F;&#x2F;设置默认的请求类型为GET\naxios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#39;    &#x2F;&#x2F;设置基础URL\n\n&#x2F;&#x2F;获取数据\nbtns[0].onclick &#x3D; function()&#123;\n    axios(&#123;\n        &#x2F;&#x2F;URL\n        url:&#39;&#x2F;posts&#x2F;2&#39;\n    &#125;).then(response &#x3D;&gt; &#123;\n        console.log(response);\n    &#125;)\n&#125;</code></pre>\n\n\n\n<h1 id=\"7、创建实例对象发送请求\"><a href=\"#7、创建实例对象发送请求\" class=\"headerlink\" title=\"7、创建实例对象发送请求\"></a>7、创建实例对象发送请求</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;获取按钮\nconst btns &#x3D; document.querySelectorAll(&#39;button&#39;)\n\n&#x2F;&#x2F;创建实例对象 http:&#x2F;&#x2F;localhost:3000&#x2F;posts\nconst arr &#x3D; axios.create ( &#123;\n    baseURL:&#39;http:&#x2F;&#x2F;localhost:3000&#39;,\n    timeout: 2000\n&#125;)\nconsole.log(arr);\n\n&#x2F;&#x2F;这里 arr 与 axios对象 的功能几乎是一样的\nbtns[0].onclick &#x3D; function()&#123;\n    &#x2F;&#x2F;和axios()方法一样\n    arr(&#123;\n        method:&#39;GET&#39;,\n        &#x2F;&#x2F;URL\n        url:&#39;&#x2F;posts&#x2F;2&#39;\n    &#125;).then(response &#x3D;&gt; &#123;\n    \tconsole.log(response);\n    &#125;)\n&#125;</code></pre>\n\n\n\n<h1 id=\"8、请求拦截器-和-响应拦截器\"><a href=\"#8、请求拦截器-和-响应拦截器\" class=\"headerlink\" title=\"8、请求拦截器 和 响应拦截器\"></a>8、请求拦截器 和 响应拦截器</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>执行顺序：</p>\n<ol>\n<li>单个请求拦截器 和 单个响应拦截器</li>\n</ol>\n<p>​    （顺序：请求开始 =&gt; 请求拦截器 =&gt; 响应拦截器 =&gt; 自定义回调）</p>\n<ol start=\"2\">\n<li>多个请求拦截器 和 多个响应拦截器（请求 按倒序执行，响应 按顺序执行）</li>\n</ol>\n<p>​    （顺序：请求开始 =&gt; 请求n =&gt; . . . =&gt; 请求1 =&gt; 响应1 =&gt; . . . =&gt; 响应n）</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;第一步：设置请求拦截器\naxios.interceptors.request.use(  config &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 发生请求前的处理\n    console.log(&quot;请求拦截器，成功&quot;);\n    return config\n&#125;, err &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 请求错误处理\n    console.log(&#39;请求拦截器,失败&#39;);\n    return Promise.reject(err);\n&#125;)\n\n&#x2F;&#x2F;第二步：响应拦截器\naxios.interceptors.response.use(res&#x3D;&gt;&#123;\n    console.log(&#39;响应拦截器,成功&#39;);\n    &#x2F;&#x2F;请求成功对响应数据做处理\n    return res &#x2F;&#x2F;该返回对象会传到请求方法的响应对象中\n&#125;,err&#x3D;&gt;&#123;\n    console.log(&#39;响应拦截器,失败&#39;);\n    &#x2F;&#x2F; 响应错误处理\n    return Promise.reject(err);\n&#125;)\n\naxios(&#123;\n    method:&#39;GET&#39;,\n    &#x2F;&#x2F;URL\n    url:&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;posts&#x2F;2&#39;\n&#125;).then(response &#x3D;&gt; &#123;\n    &#x2F;&#x2F;第三步\n    console.log(&#39;自定义回调&#39;);\n    console.log(response);\n&#125;)</code></pre>\n\n","feature":true,"text":"Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpReque...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Web 前端","slug":"Web-前端","count":2,"path":"api/categories/Web-前端.json"}],"tags":[{"name":"axios","slug":"axios","count":1,"path":"api/tags/axios.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">特性</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1、配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">1.1、安装（三种方法）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89npm%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1）npm安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89bower%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2）bower安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E9%80%9A%E8%BF%87cdn%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">3）通过cdn引入</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%94%A8axios%E5%8F%91%E9%80%81%E4%B8%8D%E5%90%8C%E7%9A%844%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2、用axios发送不同的4种请求方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%8F%90\"><span class=\"toc-text\">前提</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E5%8F%91%E9%80%81GET%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">2.1、发送GET请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E5%8F%91%E9%80%81POST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">2.2、发送POST请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E5%8F%91%E9%80%81PUT%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">2.3、发送PUT请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4%E3%80%81%E5%8F%91%E9%80%81DELETE%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">2.4、发送DELETE请求</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81axios%E5%85%B6%E4%BB%96%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3、axios其他的请求方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81axios%E8%AF%B7%E6%B1%82%E5%90%8E%EF%BC%8C%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4、axios请求后，响应结果的结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81axios%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5、axios配置对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81axios%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">6、axios的默认配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">7、创建实例对象发送请求</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8%E3%80%81%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8-%E5%92%8C-%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">8、请求拦截器 和 响应拦截器</span></a></li></ol>","author":{"name":"阡净","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/108609299?v=4","link":"/","description":"自信又可爱的女程序员","socials":{"github":{"link":"https://github.com/Qian-zj"},"twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":{"link":"https://blog.csdn.net/zj_qian"},"juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"测试","uid":"ff294b41f6454d72b979d968dd4769d6","slug":"测试","date":"2023-07-06T11:50:10.000Z","updated":"2023-07-06T11:50:10.222Z","comments":true,"path":"api/articles/测试.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"阡净","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/108609299?v=4","link":"/","description":"自信又可爱的女程序员","socials":{"github":{"link":"https://github.com/Qian-zj"},"twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":{"link":"https://blog.csdn.net/zj_qian"},"juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Promise","uid":"b468f3c3ac71ea2b71e5a5059fe38476","slug":"Promise","date":"2023-05-09T06:55:19.000Z","updated":"2023-05-09T15:47:04.073Z","comments":false,"path":"api/articles/Promise.json","keywords":null,"cover":"/images/bg11.jpg","text":"Promise 是异步编程的一种解决方案：从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。promise有三种状态： **pending(等待态)，fulfiled(成功态)，rejected(失败态)**；...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Web 前端","slug":"Web-前端","count":2,"path":"api/categories/Web-前端.json"}],"tags":[{"name":"Promise","slug":"Promise","count":1,"path":"api/tags/Promise.json"}],"author":{"name":"阡净","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/108609299?v=4","link":"/","description":"自信又可爱的女程序员","socials":{"github":{"link":"https://github.com/Qian-zj"},"twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":{"link":"https://blog.csdn.net/zj_qian"},"juejin":"","customs":{}}},"feature":true}}